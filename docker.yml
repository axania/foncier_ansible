---
- hosts: docker
  become: yes

  vars:
    resolv_searchpath: "{{ dns_resolv_searchpath }}"
    resolv_dns_server: "{{ dns_server_list }}"
    save_hosts: "{{ etc_save_hosts }}"

  tasks:

  - name: set timezone to "{{timezone}}"
    timezone:
      name: "{{timezone}}"
    tags:
       - prep

  - name: Update APT-GET cache
    apt: update_cache=yes
    tags:
       - prep

  - name: Update repository for Docker part 1 - Install some stuff
    become: yes
    command: "sudo apt-get install -y apt-transport-https ca-certificates curl  software-properties-common"
    tags:
       - prep

  - name: Add GPG key for Docker
    apt_key:
      url: "https://download.docker.com/linux/ubuntu/gpg"
      state: present
    tags:
       - prep

  - name: Add APT repo for Docker
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present
    tags:
       - prep

  - name: Update APT-GET cache again
    apt: update_cache=yes
    tags:
       - prep

  - name: Install GIT
    apt:
      name: git
      state: present
      update_cache: yes
    tags:
       - prep

  - name: Install docker-ce with the updated cache and repo
    apt:
      name: docker-ce={{ docker_ce_version }}
      state: present
      update_cache: yes
    tags:
       - prep

  - name: Make sure we have a 'docker' group
    group:
      name: docker
      state: present
    tags:
       - prep

  - name: Add current user to Docker group
    user:
      name: "{{ansible_ssh_user}}"
      group: docker
      append: yes
    tags:
       - prep

  - name: Add 'dd-agent' user to Docker group
    user:
      name: "dd-agent"
      group: docker
      append: yes
    when:
      - datadog_installed
    tags:
      - prep

  - name: Install PIP
    apt:
      name: python-pip
      state: present
      update_cache: yes
    tags:
       - prep

  - name: Upload certificates
    copy:
      src: "artifacts"
      dest: "/"
      owner: "{{ansible_ssh_user}}"
      directory_mode: yes
      group: sudo
      mode: 0755
    tags:
       - prep
       - ssl

  - name: Install PIP Prerequisites
    apt: name={{ item }} state=latest
    with_items:
      - libpq-dev
      - python-psycopg2
    tags:
      - prep
      - pip

  - name: Install Docker Compose
    pip:
       name: docker-compose
       version: "{{ docker_compose_version if docker_compose_version else omit }}"
       state: present
    tags:
       - prep
       - docker-login

  - name: Log into Sogema JFrog Docker registry for current user
    docker_login:
      registry: "{{docker_registry}}"
      username: "{{docker_user}}"
      password: "{{docker_pwd}}"
      email: "{{docker_email}}"
    tags:
       - prep
       - docker-login

  - name: Log into Sogema JFrog Docker registry for '{{ansible_ssh_user}}' user
    docker_login:
      config_path: "/home/{{ansible_ssh_user}}/.docker/config.json"
      registry: "{{docker_registry}}"
      username: "{{docker_user}}"
      password: "{{docker_pwd}}"
      email: "{{docker_email}}"
    tags:
       - prep
       - docker-login

  - name: Create custom config folder
    file:
      path: "/home/{{ansible_ssh_user}}/custom-config"
      state: directory
      mode: "u=rw,g=rw,o=r"
      group: "docker"
      owner: "{{ansible_ssh_user}}"
    tags:
       - config_folder

  - name: Upload keycloak file for Camunda
    template:
      src: ../templates/keycloak.json.j2
      dest: "/home/{{ansible_ssh_user}}/custom-config/keycloak.json"
      owner: "{{ansible_ssh_user}}"
      group: "docker"
      mode: "u=rw,g=rw,o=r"
    when: "'foncier-wf' in available_docker_services and is_keycloak_enabled"
    tags:
       - keycloak
       - config_folder

  - name: Upload custom web.xml file for Camunda
    template:
      src: ../templates/web.xml.j2
      dest: "/home/{{ansible_ssh_user}}/custom-config/web.xml"
      owner: "{{ansible_ssh_user}}"
      group: "docker"
      mode: "u=rw,g=rw,o=r"
    when: "'foncier-wf' in available_docker_services and is_keycloak_enabled"
    tags:
       - camunda
       - config_folder

  - name: Upload custom context.xml file for Camunda
    template:
      src: ../templates/context.xml.j2
      dest: "/home/{{ansible_ssh_user}}/custom-config/context.xml"
      owner: "{{ansible_ssh_user}}"
      group: "docker"
      mode: "u=rw,g=rw,o=r"
    when: "'foncier-wf' in available_docker_services and is_keycloak_enabled"
    tags:
       - camunda
       - config_folder


  - name: Upload docker-compose file
    template:
      src: ../templates/docker-compose.yml.j2
      dest: "/home/{{ansible_ssh_user}}/docker-compose.yml"
      owner: "{{ansible_ssh_user}}"
      group: docker
      mode: "u=rw,g=rw,o=r"
    tags:
       - prep
       - docker-compose
       - deploy

  - name: Run the 'down' command for Docker Compose
    docker_service:
      project_name: "{{ansible_ssh_user}}"
      project_src: /home/{{ansible_ssh_user}}
      state: absent
    tags:
       - deploy

  - name: Run the 'up' command for Docker Compose
    docker_service:
      project_name: "{{ansible_ssh_user}}"
      project_src: /home/{{ansible_ssh_user}}
      state: present
      pull: "{{ pull_images if pull_images else omit }}"
      services: "{{ available_docker_services }}"
    tags:
       - deploy

  - name: Create Foncier DB in its Postgres container
    postgresql_db: name={{db_name}} login_host={{db_host}} login_user={{db_user}} port={{db_port}} login_password={{db_pass}}
    when: "'foncier-db' in available_docker_services"
    tags:
      - db

  - name: Create Camunda DB in its Postgres container
    postgresql_db: name=process-engine login_host={{db_host}} login_user={{db_user}} port={{db_port}} login_password={{db_pass}}
    when: "'foncier-db' in available_docker_services"
    tags:
      - db

  roles:
    - { role: soplakanets.hosts }
    - { role: ypsman.resolv }
